install.packages("tidyverse")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("rvest")
install.packages("rvest")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("ropensci/lingtypology")
install.packages("vcd")
install.packages(c("ape", "extrafont", "ggrepel", "irr"))
install.packages("ggpubr")
install.packages("ggplot2")
install.packages("mapvie")
install.packages("mapview")
webshot::install_phantomjs()
library(lingtypology)
map.feature("Botlikh")
map.feature("Botlikh",
zoom.control = TRUE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# Drawing maps using [Lingtypology](https://ropensci.github.io/lingtypology/) for R
# 1. Loading the necessary packages
# For data manipulation
library(tidyverse)
# For map visualization
library(lingtypology)
# 2. Loading the necessary data
# dataset with all East Caucasian villages and languages
vill <- read_tsv("villages.csv")
# languages
lang <- read_tsv("languages.csv")
# color scheme
col <- read_tsv("colors.csv")
# glottolog points for the East Caucasian family
glot <- read_tsv("glottolog_points.csv")
# summary table of attested evidential systems
sys <- read_tsv("systems.csv")
# dataset of perfectoid forms and their properties
perfects <- read_tsv("perfects.csv")
# dataset of evidential particles
part <- read_tsv("particles.csv")
# Remove villages for which no coordinates are available yet
vill <- vill[complete.cases(vill$lat),]
# Merge village/glottologpoint and color datasets
vill_col <- merge(vill, col, by = "lang")
glot_col <- merge(glot, col, by = "lang")
sys$system <- factor(sys$system, levels = c("verb tense", "verb particle", "mixed", "no"))
map.feature(sys$lang,
features = sys$system,
color = sys$system_color,
width = 8,
title = "Evidentiality",
label = sys$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys$source),
tile = c("Esri.WorldGrayCanvas"),
minimap = TRUE)
# Add a column indicating whether evidentiality is expressed as part of verb tense (includes both "verb tense" and "mixed" systems)
sys <- sys %>%
mutate(tense = case_when(
system == "verb tense" ~ "yes",
system == "mixed" ~"yes",
TRUE ~ "no"))
# Add color scheme
sys_col <- left_join(sys, col, by = "lang")
sys_col <- sys_col[complete.cases(sys_col$group.y),]
# Change order of stroke feature in the legend
sys_col$tense <- factor(sys_col$tense, levels = c("yes", "no"))
# Draw map
map.feature(sys_col$lang,
features = sys_col$group.x,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$tense,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys_col$source),
tile = c("Esri.WorldGrayCanvas"))
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group.x,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys_col$source),
tile = c("Esri.WorldGrayCanvas"))
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group.x,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys_col$source),
tile = c("Esri.WorldGrayCanvas"))
sys <- read_tsv("data/systems.csv")
sys_col <- left_join(sys, col, by = "lang")
sys_col <- sys_col[complete.cases(sys_col$group.y),]
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group.x,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys_col$source),
tile = c("Esri.WorldGrayCanvas"))
sys <- read_tsv("data/systems.csv")
sys_col <- left_join(sys, col, by = "Language")
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group.x,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys_col$source),
tile = c("Esri.WorldGrayCanvas"))
sys <- read_tsv("data/systems.csv")
sys_col <- left_join(sys, col, by = "Language")
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys_col$source),
tile = c("Esri.WorldGrayCanvas"))
sys <- read_tsv("data/systems.csv")
sys_col <- left_join(sys, col, by = "Language")
sys_col <- sys_col[complete.cases(sys_col$group.y),]
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
tile = c("Esri.WorldGrayCanvas"))
sys <- read_tsv("data/systems.csv")
sys_col <- left_join(sys, col, by = "Language")
sys_col <- sys_col[complete.cases(sys_col$group.y),]
sys <- read_tsv("data/systems.csv")
setwd("~/Git/2019_16PragHK")
sys <- read_tsv("data/systems.csv")
sys <- read_tsv("data/systems.csv")
sys_col <- left_join(sys, col, by = "Language")
sys_col <- sys_col[complete.cases(sys_col$group.y),]
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
tile = c("Esri.WorldGrayCanvas"))
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "unsure", "no"))
map.feature(sys_col$lang,
features = sys_col$group.x,
color = sys_col$groupcol,
title = "Group",
width = 8,
stroke.features = sys_col$perfect,
stroke.color = c("black", "white"),
stroke.title = "Evidentiality",
stroke.radius = 13,
label = sys_col$lang,
label.hide = TRUE,
popup = paste("Source(s):", sys_col$source),
tile = c("Esri.WorldGrayCanvas"))
library(tidyverse)
library(lingtypology)
vill <- read_tsv("data/villages.csv")
getwd()
setwd("~/Git/sample_maps")
vill <- read_tsv("data/villages.csv")
vill <- vill[complete.cases(vill$Lat),]
col <- read_tsv("data/colors.csv")
glot <- read_tsv("data/glottolog_points.csv")
vill_col <- merge(vill, col, by = "Language")
glot_col <- merge(glot, col, by = "Language")
setwd("~/Git/master_villages")
vill <- read_tsv("data/villages.csv")
vill <- vill[complete.cases(vill$Lat),]
col <- read_tsv("data/colors.csv")
glot <- read_tsv("data/glottolog_points.csv")
vill_col <- merge(vill, col, by = "Language")
glot_col <- merge(glot, col, by = "Language")
vill_col$Language <- factor(vill_col$Language, levels =c(
"Dargwa", "Lak", "Bats", "Ingush", "Chechen", "Khinalugh", "Archi", "Tsakhur", "Rutul", "Kryz", "Budukh", "Udi", "Lezgian", "Aghul", "Tabasaran", "Avar", "Andi", "Botlikh", "Godoberi", "Chamalal", "Bagvalal", "Tindi", "Karata", "Akhvakh", "Tsez", "Hinuq", "Bezhta", "Hunzib", "Xvarshi", "Armenian", "Kumyk", "Nogai", "North Azerbaijani"))
map.feature(vill_col$Language,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Language,
color = vill_col$`Data color`,
tile = c("Esri.WorldGrayCanvas"))
map.feature(vill_col$Language,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Language,
color = vill_col$`Data color`,
width = 2,
tile = c("Esri.WorldGrayCanvas"))
map.feature(vill_col$Language,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Language,
color = vill_col$`Data color`,
width = 3,
tile = c("Esri.WorldGrayCanvas"))
map.feature(vill_col$Language,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Language,
color = vill_col$`Data color`,
width = 3,
zoom.level = 10,
tile = c("Esri.WorldGrayCanvas"))
map.feature(vill_col$Language,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Language,
color = vill_col$`Data color`,
width = 3,
zoom.level = 7,
tile = c("Esri.WorldGrayCanvas"))
map.feature(vill_col$Language,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Language,
color = vill_col$`Data color`,
width = 3,
zoom.level = 8,
tile = c("Esri.WorldGrayCanvas"))
